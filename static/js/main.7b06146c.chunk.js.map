{"version":3,"sources":["Components/Imagenes/vision.mp4","Components/Imagenes/newintro.mp4","logo.svg","Components/Header/Header.js","Components/Banner/Banner.js","Components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","Banner","Main","useState","id","videoSrc","Vision","App","autoPlay","loop","muted","src","NewIntro","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,yECA3CD,EAAOC,QAAU,IAA0B,kC,gJC8B5BC,G,wBA3BA,WACb,OACE,yBAAKC,UAAU,UACb,uBAAGC,KAAK,IAAID,UAAU,QAAtB,QAGA,4BACE,4BACE,uBAAGC,KAAK,KAAR,SAEF,4BACE,uBAAGA,KAAK,KAAR,UAEF,4BACE,uBAAGA,KAAK,KAAR,WAEF,4BACE,uBAAGA,KAAK,KAAR,WAEF,4BACE,uBAAGA,KAAK,KAAR,gBCCKC,G,MArBA,WACb,OACE,yBAAKF,UAAU,aACb,yBAAKA,UAAU,iBACb,6BAASA,UAAU,gBACjB,4BACE,uCADF,WAGA,uCAEF,6BAASA,UAAU,iBACjB,kEACA,0DAC8B,8D,sCCgDzBG,EA3DF,WAAO,IAAD,EACiBC,oBAAS,GAD1B,6BAGjB,OACE,6BACE,yBAAKJ,UAAU,kBACb,6BAASA,UAAU,eACjB,mDAGF,6BAASA,UAAU,iBACjB,oDAGJ,yBAAKA,UAAU,mBACb,6BAASA,UAAU,iBACjB,qDAGJ,yBAAKA,UAAU,oBACb,6BAASA,UAAU,gBAAgBK,GAAG,WACpC,wCACA,uBAAGL,UAAU,cAAb,kDAIF,6BACEA,UAAU,iBAcV,kBAAC,IAAD,CAAkBA,UAAU,iBAAiBM,SAAUC,KACpD,IACD,mDAIN,yBAAKP,UAAU,qBACb,6BAASA,UAAU,kBAAkBK,GAAG,UACtC,mDACA,uBAAGL,UAAU,gBAAb,qD,gBCjCKQ,MAdf,WACE,OACE,6BACE,2BAAOR,UAAU,QAAQS,UAAQ,EAACC,MAAI,EAACC,OAAK,GAC1C,4BAAQC,IAAKC,IAAUC,KAAK,eAG9B,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCLcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7b06146c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vision.23d09e8f.mp4\";","module.exports = __webpack_public_path__ + \"static/media/newintro.17b85069.mp4\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <a href=\"#\" className=\"logo\">\r\n        Logo\r\n      </a>\r\n      <ul>\r\n        <li>\r\n          <a href=\"#\">Home</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"#\">About</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"#\">Guides</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"#\">Videos</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"#\">Contact</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./Banner.css\";\r\n\r\nconst Banner = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"containerNest\">\r\n        <section className=\"firstsection\">\r\n          <h1>\r\n            <span>Kadaj</span> Gaming\r\n          </h1>\r\n          <h2>Guides</h2>\r\n        </section>\r\n        <section className=\"secondsection\">\r\n          <p>Welcome to the new Warlock Workshop</p>\r\n          <p>\r\n            And learn all the basics of <span>Mardita sea borre todo</span>\r\n          </p>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","import React, { useState } from \"react\";\r\nimport \"./Main.css\";\r\nimport Vision from \"../Imagenes/vision.mp4\";\r\nimport HoverVideoPlayer from \"react-hover-video-player\";\r\n\r\nconst Main = () => {\r\n  const [PlayVideo, setPlayVideo] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"classcontainer\">\r\n        <section className=\"demosection\">\r\n          <h1>Demonology Warlock</h1>\r\n        </section>\r\n\r\n        <section className=\"afflicsection\">\r\n          <h1>Affliction Warlock</h1>\r\n        </section>\r\n      </div>\r\n      <div className=\"destrocontainer\">\r\n        <section className=\"destrosection\">\r\n          <h1>Destruction Warlock</h1>\r\n        </section>\r\n      </div>\r\n      <div className=\"dungeoncontainer\">\r\n        <section className=\"mythicsection\" id=\"parent2\">\r\n          <h1>Mythic +</h1>\r\n          <p className=\"mythicfade\">\r\n            Raiding tips, BiS gear, log parses and more..\r\n          </p>\r\n        </section>\r\n        <section\r\n          className=\"visionsection\"\r\n          //   onMouseEnter={() => setPlayVideo(true)}\r\n          //   onMouseLeave={() => setPlayVideo(false)}\r\n        >\r\n          {/* {PlayVideo ? (\r\n            <video className=\"vision\" autoPlay loop muted>\r\n              <source src={Vision} type=\"video/mp4\" />\r\n            </video>\r\n          ) : (\r\n            <video className=\"vision\" preload loop muted>\r\n              <source src={Vision} type=\"video/mp4\" />{\" \"}\r\n            </video>\r\n          )} */}\r\n\r\n          <HoverVideoPlayer className=\"player-wrapper\" videoSrc={Vision}>\r\n            {\" \"}\r\n            <h1>Horrific Visions</h1>\r\n          </HoverVideoPlayer>\r\n        </section>\r\n      </div>\r\n      <div className=\"nyalothacontainer\">\r\n        <section className=\"nyalothasection\" id=\"parent\">\r\n          <h1>Nyalotha Raid Guide</h1>\r\n          <p className=\"nyalothafade\">\r\n            Raiding tips, BiS gear, log parses and more..\r\n          </p>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Header from \"./Components/Header/Header\";\nimport Banner from \"./Components/Banner/Banner\";\nimport Main from \"./Components/Main/Main.js\";\nimport NewIntro from \"./Components/Imagenes/newintro.mp4\";\n\nfunction App() {\n  return (\n    <div>\n      <video className=\"video\" autoPlay loop muted>\n        <source src={NewIntro} type=\"video/mp4\" />\n      </video>\n\n      <Header />\n      <Banner />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}